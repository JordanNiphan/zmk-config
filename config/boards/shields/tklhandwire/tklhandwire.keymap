
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#include <dt-bindings/zmk/pointing.h>

#define DEFAULT     0
#define NUMLAYER    1
#define NAVLAYER    2

/*
  ╭─────────────────────────────┬───────────────────────────────────╮ 
  │  0   1   2   3   4  5   6   |   7   8   9   10  11  12  __  14  │
  │ 15  16  17  18  19  20  __  |   22  23  24  25  26  27  28  29  |
  │ 30  31  32  33  34  35  __  |   37  38  39  40  41  42  43  __  |
  │ 44  45  46  47  48  49  __  |   51  52  53  54  55  56  57  __  |
  | 59  60  61  __  63  __  __  |   __  67  __  __  70  71  72  __  |
  ╰─────────────────────────────┴───────────────────────────────────╯                              */

/ {
    
    combos {
        compatible = "zmk,combos";
        combo_bootloader_left {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&bootloader>;
        };
        combo_bootloader_right {
            timeout-ms = <50>;
            key-positions = <12 14>;
            bindings = <&bootloader>;
        };
    };
};

/ {
        keymap {
                compatible = "zmk,keymap";
                default_layer {

                        bindings = <

                            &kp ESC     &kp 1   &kp 2   &kp 3   &kp 4   &kp 5   &kp 6               &kp 7 &kp 8 &kp 9 &kp 0 &kp MINUS   &kp EQUAL   &kp BSPC                         
                            &kp TAB     &kp Q   &kp W   &kp E   &kp R   &kp T                       &kp Y &kp U &kp I &kp O &kp P       &kp LBKT    &kp RBKT &kp BSLH
                            &kp CAPS    &kp A   &kp S   &kp D   &kp F   &kp G                       &kp H &kp J &kp K &kp L &kp ;       &kp SQT     &kp RET
                            &kp LSHIFT  &kp Z   &kp X   &kp C   &kp V   &kp B                       &kp N &kp M &kp , &kp . &kp /       &kp LSHIFT        
                                        &kp LCTRL    &kp LGUI   &kp LALT   &kp SPACE        &kp SPACE  &kp RALT   &kp RGUI &kp RCTRL 
                  
                        >;
                };
                NUMLAYER {

                        bindings = <
                            &kp ESC     &kp 1   &kp 2   &kp 3   &kp 4   &kp 5   &kp 6               &kp 7 &kp 8 &kp 9 &kp 0 &kp MINUS   &kp EQUAL   &kp BSPC                         
                            &kp TAB     &kp Q   &kp W   &kp E   &kp R   &kp T                       &kp Y &kp U &kp I &kp O &kp P       &kp LBKT    &kp RBKT &kp BSLH
                            &kp CAPS    &kp A   &kp S   &kp D   &kp F   &kp G                       &kp H &kp J &kp K &kp L &kp ;       &kp SQT     &kp RET
                            &kp LSHIFT  &kp Z   &kp X   &kp C   &kp V   &kp B                       &kp N &kp M &kp , &kp . &kp /       &kp LSHIFT        
                                        &kp LCTRL    &kp LGUI   &kp LALT   &kp SPACE        &kp SPACE  &kp RALT   &kp RGUI &kp RCTRL 
                  
                        >;
                };
                NAVLAYER {

                        bindings = <
                            &kp ESC     &kp 1   &kp 2   &kp 3   &kp 4   &kp 5   &kp 6               &kp 7 &kp 8 &kp 9 &kp 0 &kp MINUS   &kp EQUAL   &kp BSPC                         
                            &kp TAB     &kp Q   &kp W   &kp E   &kp R   &kp T                       &kp Y &kp U &kp I &kp O &kp P       &kp LBKT    &kp RBKT &kp BSLH
                            &kp CAPS    &kp A   &kp S   &kp D   &kp F   &kp G                       &kp H &kp J &kp K &kp L &kp ;       &kp SQT     &kp RET
                            &kp LSHIFT  &kp Z   &kp X   &kp C   &kp V   &kp B                       &kp N &kp M &kp , &kp . &kp /       &kp LSHIFT        
                                        &kp LCTRL    &kp LGUI   &kp LALT   &kp SPACE        &kp SPACE  &kp RALT   &kp RGUI &kp RCTRL 
                  
                        >;
                };
        };
};