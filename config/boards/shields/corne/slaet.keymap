/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>
#define DEFAULT      0
#define NUMLAYER     1
#define NAVLAYER     2
#define MOUSELAYER   3
#define BARDLAYER    4

/*                                      42 KEY MATRIX / LAYOUT MAPPING

  ╭────────────────────────┬────────────────────────╮ ╭─────────────────────────┬─────────────────────────╮
  │  0   1   2   3   4   5 │  6   7   8   9  10  11 │ │ LT5 LT4 LT3 LT2 LT1 LT0 │ RT0 RT1 RT2 RT3 RT4 RT5 │
  │ 12  13  14  15  16  17 │ 18  19  20  21  22  23 │ │ LM5 LM4 LM3 LM2 LM1 LM0 │ RM0 RM1 RM2 RM3 RM4 RM5 │
  │ 24  25  26  27  28  29 │ 30  31  32  33  34  35 │ │ LB5 LB4 LB3 LB2 LB1 LB0 │ RB0 RB1 RB2 RB3 RB4 RB5 │
  ╰───────────╮ 36  37  38 │ 39  40  41 ╭───────────╯ ╰───────────╮ LH2 LH1 LH0 │ RH0 RH1 RH2 ╭───────────╯
              ╰────────────┴────────────╯                         ╰─────────────┴─────────────╯             */
/ {
    macros {
        macro_slaet: macro_slaet {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings 
            = <&macro_press &kp F &kp J>
            , <&macro_pause_for_release>
            , <&macro_release &kp F &kp J>;
            };
        };
};
/ {
    combos {
        compatible = "zmk,combos";
        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };
        combo_ent {
            timeout-ms = <50>;
            key-positions = <31 32>;
            bindings = <&kp RET>;
        };
        combo_bspc {
            timeout-ms = <50>;
            key-positions = <19 20>;
            bindings = <&kp BSPC>;
        };
        combo_tab {
            timeout-ms = <50>;
            key-positions = <3 4>;
            bindings = <&kp TAB>;
        };
        combo_quote {
            timeout-ms = <50>;
            key-positions = <7 8>;
             bindings = <&kp SQT>;
        };
        combo_bslsh {
            timeout-ms = <50>;
            key-positions = <7 8 9>;
            bindings = <&kp BACKSLASH>;
        };
        combo_del {
            timeout-ms = <50>;
            key-positions = <15 16>;
            bindings = <&kp DEL>;
        };
        combo_lclk {
            timeout-ms = <50>;
            key-positions = <2 3>;
            bindings = <&mkp LCLK>;
        };
        combo_rclk {
            timeout-ms = <50>;
            key-positions = <1 2>;
            bindings = <&mkp RCLK>;
        };
        combo_holda {
            timeout-ms = <50>;
            key-positions = <0 1 2>;
            bindings = <&kt LC(A)>;
        };
        combo_holdw {
            timeout-ms = <50>;
            key-positions = <1 2 3>;
            bindings = <&kt W>;
        };
        combo_pgup {
            timeout-ms = <50>;
            key-positions = <1 15>;
            bindings = <&kp PG_UP>;
        };
        combo_togbard {
            timeout-ms = <50>;
            key-positions = <25 26>;
               bindings = <&tog BARDLAYER>;
        };                          
    };
};


/ {
        keymap {
                compatible = "zmk,keymap";

                default_layer {

                        bindings = <
   &macro_slaet      &kp Q &kp W &kp F &kp P &kp B   &kp J &kp L  &kp U     &kp Y               &kp SEMI     &kp LC(S)
   &kp LC(C)   &kp A &kp R &kp S &kp T &kp G   &kp M &kp N  &kp E     &lt NAVLAYER I      &kp O        &kp SQT
   &kp LC(V)  &kp Z &kp X &kp C &kp D &kp V   &kp K &kp H  &kp COMMA &kp DOT             &kp FSLH     &kp ESC

                  &kp LCTRL &sk LSHIFT &lt NUMLAYER SPACE   &sk RSHIFT &kp RCTRL &kp RALT
                  
                        >;
                };
                
                NUMLAYER {

                        bindings = <
   &trans   &kp EXCL &kp AT    &kp LBRC &kp RBRC &kp PIPE2     &bootloader &kp N7  &kp N8     &kp N9   &kp ASTRK          &kp EQUAL
   &trans &kp HASH &kp DLLR  &kp LPAR &kp RPAR &kp DOT       &trans &kp N4  &kp N5     &kp N6   &kp PLUS           &kp MINUS
   &bootloader &kp FSLH &kp CARET &kp LBKT &kp RBKT &kp TILDE2    &trans &kp N1  &kp N2     &kp N3   &kp KP_DIVIDE      &kp AMPS

                  &trans &sk LSHIFT &trans   &kp N0 &kp DOT &kp RALT
                  
                        >;
                };
                NAVLAYER {

                        bindings = <
   &trans   &trans  &kp PG_DN   &kp UP      &kp PG_UP   &trans           &trans &trans  &trans  &trans  &trans  &bt BT_CLR
   &trans   &trans  &kp LEFT    &kp DOWN    &kp RIGHT   &trans           &trans &trans  &trans  &trans  &trans  &trans
   &bootloader   &trans  &trans      &trans      &trans      &trans           &trans &trans  &trans  &trans  &trans  &bt BT_SEL 3

                         &kp LCTRL &sk LSHIFT &kp SPACE                        &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2
                  
                        >;
                };
                MOUSELAYER {

                        bindings = <
   &trans   &trans &trans        &trans     &trans      &trans      &trans   &trans     &trans    &trans   &trans     &trans 
   &trans   &trans &mkp RCLK     &mkp LCLK  &trans      &trans      &trans   &trans     &trans    &trans   &trans     &trans 
   &trans   &trans &trans        &trans     &trans      &trans      &trans   &trans     &trans    &trans   &trans     &trans 

                   &trans &trans &trans  &trans &trans &trans
                  
                        >;
                };
                BARDLAYER {

                        bindings = <

&kp  F9	    &kp  LC(Q)	&kp  &macro_slaet &kp  LC(F)	&kp  LC(P)	&kp  LC(B)	&kp	 LC(J)	&kp	 LC(L)	&kp  LC(U)		&kp	 LC(Y)		&kp  SEMI	&kp  LC(S)
&kp  KP_N9	&kp  LC(A)	&kp  R	&kp  LC(S)	&kp  LC(T)	&kp  LC(G)	&kp  LC(M)	&kp  LC(N)	&kp  LC(E)		&kp  LC(I)		&kp  LC(O)	&kp  SQT
&kp  KP_N3	&kp  LC(Z)	&kp  X	&kp  C	    &kp  LC(D)	&kp  LC(V)	&kp  LC(K)	&kp  LC(H)	&kp  LC(COMMA)	&kp  LC(DOT)	&trans	    &trans

                  &kp LCTRL &sk LSHIFT &kp SPACE   &sk RSHIFT &kp RCTRL &kp RALT
                  
                        >;
                };
        };
};