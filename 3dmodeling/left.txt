// Keyboard Layout Visualization in OpenSCAD - Left Hand Keys + Padded Base Plate (Merged with Holes Thru Plate)

// --- Constants ---
u = 19;         // Standard key unit size (mm)
gap = 1;        // Gap between keys (actual key dimension = u - gap)
key_height = 8; // Height of the keycap base
hole_size = 14; // Size of the square hole side (mm)
plate_thickness = 2; // Thickness of the base plate
plate_padding = 20; // Padding around the plate perimeter (mm)

// --- Left Hand Key Data ---
// Format: [ "", "", x_start_units, y_row_index, width_units ]
// Contains only keys typically typed by the left hand.
left_key_data = [
  // Row 0 (y=0)
  [ "", "", 0, 0, 1 ], [ "", "", 1, 0, 1 ], [ "", "", 2, 0, 1 ], [ "", "", 3, 0, 1 ], [ "", "", 4, 0, 1 ], [ "", "", 5, 0, 1 ], [ "", "", 6, 0, 1 ],
  // Row 1 (y=-1)
  [ "", "", 0, -1, 1.5 ], [ "", "", 1.5, -1, 1 ], [ "", "", 2.5, -1, 1 ], [ "", "", 3.5, -1, 1 ], [ "", "", 4.5, -1, 1 ], [ "", "", 5.5, -1, 1 ],
  // Row 2 (y=-2)
  [ "", "", 0, -2, 1.75 ], [ "", "", 1.75, -2, 1 ], [ "", "", 2.75, -2, 1 ], [ "", "", 3.75, -2, 1 ], [ "", "", 4.75, -2, 1 ], [ "", "", 5.75, -2, 1 ],
  // Row 3 (y=-3)
  [ "", "", 0, -3, 2.25 ], [ "", "", 2.25, -3, 1 ], [ "", "", 3.25, -3, 1 ], [ "", "", 4.25, -3, 1 ], [ "", "", 5.25, -3, 1 ], [ "", "", 6.25, -3, 1 ],
  // Row 4 (y=-4)
  [ "", "", 0, -4, 1.25 ], [ "", "", 1.25, -4, 1.25 ], [ "", "", 2.5, -4, 1.25 ],
  [ "", "", 3.75, -4, 3.5 ] // Left part of Space bar
];


// --- Module to draw a SINGLE SOLID keycap (NO HOLE) ---
module solid_keycap(width_u = 1, depth_u = 1, pos = [0,0,0]) {
    key_w = width_u * u - gap;
    key_d = depth_u * u - gap;

    center_x = pos[0] + (width_u * u / 2);
    center_y = pos[1] + (depth_u * u / 2);
    center_z = pos[2] + key_height / 2; // Center Z within the keycap's height

    translate([center_x, center_y, center_z]) {
        // Only the keycap base cube
        cube([key_w, key_d, key_height], center=true);
    }
}

// --- Module to generate ALL SOLID keys ---
module solid_keyboard(key_data_array) {
     for (key = key_data_array) {
        x_pos_u = key[2];
        y_row_idx = key[3];
        width_u = key[4];

        key_pos = [ x_pos_u * u, y_row_idx * u, 0 ]; // Place bottom at z=0
        solid_keycap(width_u, 1, key_pos);
    }
}

// --- Module to generate the SOLID padded base plate ---
module solid_padded_base_plate(key_data_array) {
     min_x_u = min([for (k = key_data_array) k[2]]);
     max_x_u = max([for (k = key_data_array) k[2] + k[4]]);
     min_y_u = min([for (k = key_data_array) k[3]]);
     max_y_u = max([for (k = key_data_array) k[3]]);

     base_width = (max_x_u - min_x_u) * u + gap;
     base_depth = (max_y_u - min_y_u + 1) * u + gap;

     plate_width = base_width + 2 * plate_padding;
     plate_depth = base_depth + 2 * plate_padding;

     origin_x = min_x_u * u - gap/2 - plate_padding;
     origin_y = min_y_u * u - gap/2 - plate_padding;
     origin_z = -plate_thickness; // Plate goes from Z= -thickness to Z=0

     translate([origin_x, origin_y, origin_z]) {
        cube([plate_width, plate_depth, plate_thickness]);
     }
 }

// --- Module to generate ONLY THE HOLE CUTTERS ---
module key_hole_cutters(key_data_array) {
    total_height = key_height + plate_thickness; // Total height the hole needs to cut through
    cutter_height = total_height + 2; // Add buffer for clean cuts

    for (key = key_data_array) {
        x_pos_u = key[2];
        y_row_idx = key[3];
        width_u = key[4];

        // Calculate center position same as keycap center X/Y
        center_x = (x_pos_u * u) + (width_u * u / 2);
        center_y = (y_row_idx * u) + (1 * u / 2); // Assuming depth_u = 1

        // Center the cutter vertically across the combined keycap+plate height
        center_z = (key_height - plate_thickness) / 2;

        // Create the tall square prism for cutting
        translate([center_x, center_y, center_z]) {
            cube([hole_size, hole_size, cutter_height], center=true);
        }
    }
}


// --- Render the Final Object using Difference ---
difference() {
    // 1. Create the combined solid shape
    union() {
        solid_keyboard(left_key_data); // Use left hand data
        solid_padded_base_plate(left_key_data); // Use left hand data
    }

    // 2. Subtract the hole cutters
    key_hole_cutters(left_key_data); // Use left hand data
}